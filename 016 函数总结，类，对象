# def f(*args, **kwargs):
#     print(args)
#     print(kwargs)
#
#
# f(1, 2, 3, name='m', age=100)


# def func1():
#     a = 1
#     b = 2
#     print(a)
#
#     def func2():
#         b = 3
#         print(b)
#
#     print(666)
#     func2()
#     print(111)
#
#
# func1()


# def func1():
#     a = 1
#     b = 2
#     print(a)
#
#     def func2():
#         b = 3
#         print(b)
#
#     print(666)
#     return func2
#
#
# func1()()


# class Person:
#     '''类体（两部分）：变量部分，方法（函数）部分'''
#     mind = '有思想'    # 变量，静态变量/字段
#     animal = '高级动物'
#     faith = '有信仰'
#
#     def __init__(self):
#         print(6)
#     # def __init__(self):
#     #     print('6')
#     def work(self): # 方法，函数，动态变量
#         print('人类都会工作')
#     def shop(self):
#         print('人类都会购物')


# print(Person.__dict__)
# print(Person.__dict__['faith'])

# Person.__dict__['mind'] = '无脑'
# print(Person.__dict__['mind'])

# print(Person.mind)

# Person.money = '货币'
# print(Person.money)

# del Person.mind

# Person.work(1)

# Person()









# class Person:
#     '''类体（两部分）：变量部分，方法（函数）部分'''
#     mind = '有思想'    # 变量，静态变量/字段
#     animal = '高级动物'
#     faith = '有信仰'
#
#     def __init__(self, name, age, sex, hobby):
#         print(name, age, sex, hobby)
#
#     def work(self): # 方法，函数，动态变量
#         print('人类都会工作')
#     def shop(self):
#         print('人类都会购物')
#
# ret = Person('a', 25, 'male', 'read')
# print(ret)





class Person:
    '''类体（两部分）：变量部分，方法（函数）部分'''
    mind = '有思想'    # 变量，静态变量/字段
    animal = '高级动物'
    faith = '有信仰'

    def __init__(self, name, age, sex, hobby):
        self.name = name
        self.age = age
        self.sex = sex
        self.hobby = hobby

    def work(self): # 方法，函数，动态变量
        print('人类都会工作')
    def shop(self):
        print(self)
        print('人类都会购物')

ret = Person('a', 25, 'male', 'read')
# print(ret.name)
# ret.high = 175
# print(ret.high)
# del ret.high
# print(ret.high)

ret.shop()
print(ret)

















#作业
# 1.完成下列功能:
#   1.1创建一个人类Person,再类中创建3个静态变量(静态字段)
#     animal = '高级动物'
#     soul = '有灵魂'
#     language = '语言'
#   1.2在类中定义三个方法,吃饭,睡觉,工作.
#   1.3在此类中的__init__方法中,给对象封装5个属性:国家,姓名,性别,年龄,  身高.
#   1.4实例化四个人类对象:
#     第一个人类对象p1属性为:中国,alex,未知,42,175.
#     第二个人类对象p2属性为:美国,武大,男,35,160.
#     第三个人类对象p3属性为:你自己定义.
#     第四个人类对象p4属性为:p1的国籍,p2的名字,p3的性别,p2的年龄,p3  的身高.
#   1.5 通过p1对象执行吃饭方法,方法里面打印:alex在吃饭.
#   1.6 通过p2对象执行吃饭方法,方法里面打印:武大在吃饭.
#   1.7 通过p3对象执行吃饭方法,方法里面打印:(p3对象自己的名字)在吃饭.
#   1.8 通过p1对象找到Person的静态变量 animal
#   1.9 通过p2对象找到Person的静态变量 soul
#   2.0 通过p3对象找到Person的静态变量 language
# class Person:
#     animal = '高级动物'
#     soul = '有灵魂'
#     language = '语言'
#
#     def __init__(self, nation, name, sex, age, hight):
#         self.nation = nation
#         self.name = name
#         self.sex = sex
#         self.age = age
#         self.hight = hight
#
#     def eat(self):
#         print('%s在吃饭' % self.name)
#
#     def sleep(self):
#         print('睡觉')
#
#     def work(self):
#         print('工作')
#
#
# p1 = Person('中国', 'alex', '未知', 42, 175)
# p2 = Person('美国', '武大', '男', 35, 160)
# p3 = Person('中国', 'm', '男', 18, 172)
# p4 = Person('p1.nation', 'p2.name', 'p3.sex', p2.age, p3.hight)
#
# p1.eat()
# p2.eat()
# p3.eat()
#
# print(p1.animal)
# print(p2.soul)
# print(p3.language)


# 2.通过自己创建类,实例化对象
#   在终端输出如下信息
#   小明，10岁，男，上山去砍柴
#   小明，10岁，男，开车去东北
#   小明，10岁，男，最爱打篮球
# class Person:
#
#     def __init__(self, name, age, sex):
#         self.name = name
#         self.age = age
#         self.sex = sex
#
#     def chop_wood(self):
#         print('%s，%s，%s，上山去砍柴' % (self.name, self.age, self.sex))
#
#     def drive(self):
#         print('%s，%s，%s，开车去东北' % (self.name, self.age, self.sex))
#
#     def basketball(self):
#         print('%s，%s，%s，最爱打篮球' % (self.name, self.age, self.sex))
#
#
# p1 = Person('小明', '10岁', '男')
# p1.chop_wood()
# p1.drive()
# p1.basketball()


# 3.模拟英雄联盟写一个游戏人物的类（升级题）.
#   要求:
#   (1)创建一个 Game_role的类.
#   (2) 构造方法中给对象封装name,ad(攻击力),hp(血量).三个属性.
#   (3) 创建一个attack方法,此方法是实例化两个对象,互相攻击的功能:
#       例: 实例化一个对象 盖伦,ad为10, hp为100
#       实例化另个一个对象 剑豪 ad为20, hp为80
#       盖伦通过attack方法攻击剑豪,此方法要完成 '谁攻击谁,谁掉了多少血,  还剩多少血'的提示功能.

class Game_role:
    def __init__(self, name, ad, hp):
        self.name = name
        self.ad = ad
        self.hp = hp

    def attack(self, p):
        p.hp = p.hp - self.ad
        print('%s攻击%s,%s掉了%s血,还剩%s血' % (self.name, p.name, p.name, self.ad, p.hp))


p1 = Game_role('盖伦', 10, 100)
p2 = Game_role('亚索', 20, 80)
p1.attack(p2)




# 版本一：添加武器：斧子，刀，枪，棍，棒...,
# 代码不合理: 人物利用武器攻击别人,你的动作发起者是人,而在代码中斧子为发起者.
# class Game_Role:
#     def __init__(self, name, ad, hp):
#         self.name = name
#         self.ad = ad
#         self.hp = hp
#
#     def attack(self, p):
#         p.hp = p.hp - self.ad
#         print('%s攻击%s,%s掉了%s血,还剩%s血' % (self.name, p.name, p.name, self.ad, p.hp))
#
#
# class Weapon:
#     def __init__(self, name, ad):
#         self.name = name
#         self.ad = ad
#
#     def fight(self, p1, p2):
#         p2.hp = p2.hp - self.ad - p1.ad
#         print('%s用%s打了%s,%s掉了%s血,还剩%s血' \
#               % (p1.name, self.name, p2.name, p2.name, self.ad + p1.ad, p2.hp))
#
#
# p1 = Game_Role('a', 20, 500)
# p2 = Game_Role('b', 50, 200)
# axe = Weapon('斧', 60)
# broadsword = Weapon('刀', 100)
#
# axe.fight(p1, p2)
# broadsword.fight(p2, p1)
#
# p1.attack(p2)

# 版本二:
class Game_Role:
    def __init__(self, name, ad, hp):
        self.name = name
        self.ad = ad
        self.hp = hp

    def armament_weapon(self, wea):
        self.wea = wea


class Weapon:
    def __init__(self, name, ad):
        self.name = name
        self.ad = ad

    def fight(self, p1, p2):
        p2.hp = p2.hp - self.ad
        print('%s用%s打了%s,%s掉了%s血,还剩%s血' \
              % (p1.name, self.name, p2.name, p2.name, self.ad + p1.ad, p2.hp))


p1 = Game_Role('a', 20, 500)
p2 = Game_Role('b', 50, 200)
axe = Weapon('斧', 60)
broadsword = Weapon('刀', 100)

print(axe)
p1.armament_weapon(axe)  # 给a装备了斧这个对象.
print(p1.wea)
print(p1.wea.name)
print(p1.wea.ad)
p1.wea.fight(p1, p2)
