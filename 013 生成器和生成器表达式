# def f():
#     print('a')
#     yield 'b'
# print(f())


# def f():
#     print('a')
#     yield 'b'
#     print('c')
#     yield 'd'
# g = f()
# print(g.__next__())
# print(g.__next__())


# def f():
#     print('a')
#     v = yield 'b'
#     print('c')
#     print(v)
#     yield 'd'
#     print('e')
#     yield 'f'
# g = f()
# print(g.__next__())
# print(g.send(1))
# print(g.__next__())


# def eat():
#     print('eat what')
#     a = yield 'fish'
#     print('a =', a)
#     b = yield 'rice'
#     print('b =', b)
#     c = yield 'apple'
#     print('c =', c)
#     yield 'over'
#
# gen = eat()
#
# ret1 = gen.__next__()
# print(ret1)
# ret2 = gen.send('noodles')
# print(ret2)
# ret3 = gen.send('pear')
# print(ret3)
# ret4 = gen.send('cake')
# print(ret4)


# def f():
#     yield 1
#     yield 2
#     yield 3
# g = f()
# lst = list(g)
# print(lst)


# lst = ['a%s' % i for i in range(1, 11)]
# print(lst)


# lst = [i for i in range(1, 101) if i % 13 == 0]
# print(lst)


# # 找出名字里带两个e的人
# names = [['Tom', 'Billy', 'Jefferson', 'Andrew', 'Wesley', 'Steven', 'Joe'], ['Alice', 'Jill', 'Ana', 'Wendy', 'Jennifer', 'Sherry', 'Eva']]
# # 不⽤推导式和表达式
# result = []
# for list in names:
#     for name in list:
#         if name.count("e") == 2:
#             result.append(name)
# print(result)
# # 推导式
# lst = [el for e in names for el in e if el.count("e") == 2]
# print(lst)


# g = (i for i in range(10))
# print(g)
# print(g.__next__())
# print(list(g))


# def f():
#     print(1)
#     yield 2
# g = f() # 生成器g
# g1 = (i for i in g) # 生成器g1，但是g1的数据来源于g
# g2 = (i for i in g1) # 生成器g2，来源g1
# print(list(g)) # 获取g中的数据，这时f()才会被执⾏，打印1，获取到2，g完毕
# print(list(g1)) # 获取g1中的数据，g1的数据来源是g，但是g已经取完了，g1也就没有数据
# print(list(g2)) # 和g1同理

# # 把字典中的key:value互换
# dic = {"a": "1", "b": "2"}
# new_dic = {dic[key]: key for key in dic}
# print(new_dic)


# # lst1中元素为key，list2中元素做value
# lst1 = ["a", "b", "c", "d"]
# lst2 = ['1', "2", "3", "4"]
# dic = {lst1[i]: lst2[i] for i in range(len(lst1))}
# print(dic)


# lst = ["a", "a", "b", "c", "c", "d", "d"]
# s = {i for i in lst}
# print(s)

