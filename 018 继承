# class Animal:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age
#
#
# class Person:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age
#
#
# class Cat:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age
#
#
# class Dog:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age
#
#
# p1 = Person('m', 'man', 25)


# class Animal:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age
#
#
# class Person(Animal):
#     pass
#
#
# p1 = Person('m', 'man', 25)
# print(p1.__dict__)


# class Animal:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age
#
#     def eat(self, food):
#         print('%s吃%s' % (self.name, food))
#
#
# class dog(Animal):
#
#     def bark(self):
#         print('汪汪汪')
#
#     def eat(self):
#         print('%s吃狗粮' % self.name)
#
#
# dog = dog('旺财', '雄', 2)
# dog.eat()


# class Animal:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age


# class bird(Animal):
#     def __init__(self, name, sex, age, wing):
#         Animal.__init__(self, name, sex, age)   # 执行父类的__init__()
#         self.wing = wing
#
# b1 = bird('鹦鹉', '公', 20, '绿翅膀')

# class bird(Animal):
#     def __init__(self, name, sex, age, wing):
#         super().__init__(name, sex, age)
#         self.wing = wing
#
# b1 = bird('鹦鹉', '公', 20, '绿翅膀')


# class Animal:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age
#
#     def eat(self, food):
#         print('%s吃%s' % (self.name, food))
#
#
# class bird(Animal):
#     def __init__(self, name, sex, age, wing):
#         Animal.__init__(self, name, sex, age)  # 执行父类的__init__()
#         self.wing = wing
#
#     def eat(self, food):
#         super().eat(food)
#         print('%s吃东西2' % self.name)
#
#
# b1 = bird('鹦鹉', '公', 20, '绿翅膀')
# b1.eat('虫子')


# class A:
#     def func(self):
#          print('IN A')
# class B(A):
#     pass
# class C(B):
#     pass
# c1 = C()
# c1.func()



# class A:
#     def func(self):
#         print('IN A')
# class B(A):
#     pass
#     # def func(self):
#     #     print('IN B')
# class C(A):
#     def func(self):
#         print('IN C')
# class D(B):
#     pass
#     # def func(self):
#     #     print('IN D')
# class E(C):
#     def func(self):
#         print('IN E')
# class F(D,E):
#     pass
#     # def func(self):
#     #     print('IN F')
#
# f1 = F()
# f1.func()


# class A:
#     def func(self):
#         print('IN A')
#
# class B(A):
#     pass
#     # def func(self):
#     #     print('IN B')
#
# class C:
#     pass
#     # def func(self):
#     #     print('IN C')
#
# class D(B):
#     pass
#     # def func(self):
#     #     print('IN D')
#
# class E(C):
#     def func(self):
#         print('IN E')
#
# class F(D,E):
#     pass
#     # def func(self):
#     #     print('IN F')
#
# f1 = F()
# f1.func()
#
#
# print(F.mro())  # 查询类的继承顺序








# 作业
# 1，
# a,定义一个父类Animal，在构造方法中封装三个属性，姓名，性别，年龄，
# 再给其添加一个eat的方法，方法中显示%s正在吃饭（%s是哪个对象调用此方法，显示哪个对象名字）。
# b,定义两个子类Person,Dog，全部继承这个父类Animal.
# c,Person类中，有构造方法，封装一个皮肤的属性，有eat方法，方法中显示人类正在吃饭。
# d,Dog类中，有构造方法，封装一个毛色的属性，有eat方法，方法中显示狗狗正在吃饭。
# 上面这几个类创建完成之后，完成下列要求：
# ①：实例化一个人类的对象，让其只封装皮肤属性。
# ②：实例化一个人类的对象，让其封装姓名，性别，年龄，皮肤四个属性。
# ③：实例化一个狗类的对象，让其只封装毛色属性。
# ④：实例化一个狗类的对象，让其封装姓名，性别，年龄，毛色四个属性。
# ⑤：实例化一个人类的对象，让其只执行父类的eat方法（可以对人类代码进行修改）。
# ⑥：实例化一个狗类的对象，让其既执行父类的eat方法，又执行子类的eat方法。
# class Animal:
#     def __init__(self, name, sex, age):
#         self.name = name
#         self.sex = sex
#         self.age = age
#
#     def eat(self):
#         print('%s正在吃饭' % self.name)
#
#
# class Person(Animal):
#     def __init__(self, skin):
#         self.skin = skin
#
#     def eat(self):
#         print('人类正在吃饭')
#
# p1 = Person('yellow')
# print(p1.__dict__)


# class Person(Animal):
#     def __init__(self, name, sex, age, skin):
#         super().__init__(name, sex, age)
#         self.skin = skin
#
#     def eat(self):
#         print('人类正在吃饭')


#
#
# class Dog(Animal):
#     def __init__(self, name, sex, age, color):
#         super().__init__(name, sex, age)
#         self.color = color
#
#     def eat(self):
#         super().eat()
#         print('狗狗正在吃饭')
#
# p1 = Person('yellow')
# p2 = Person('m', '男', 25, 'yellow')
# d1 = Dog('black')
# d2 = Dog('旺财', '雄', 2, 'black')
# p2.eat()
# d2.eat()




