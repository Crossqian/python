# class A:
#     pass
# class B(A):
#     pass
# b = B()
# print(isinstance(b, B))
# print(isinstance(b, A))


# class A:
#     pass
# class B(A):
#     pass
# print(issubclass(B, A))
# print(issubclass(B, B))


# class Student:
#     def __init__(self):
#         pass
#     def check_course(self):
#         print('check_course')
#     def choose_course(self):
#         print('choose_course')
#     def choosed_course(self):
#         print('choosed_course')
#
# stu = Student()
# num = input('输入')
# if num == 'check_course':
#     stu.check_course()
# elif num == 'choose_course':
#     stu.choose_course()
# elif num == 'choosed_course':
#     stu.choosed_course()


# class Student:
#     ROLE = '学生'
#     @classmethod
#     def check_course(cls):
#         print('查看课程')
#     @staticmethod
#     def login():
#         print('登录')
# # 反射查看属性
# print(Student.ROLE)
# print(getattr(Student, 'ROLE'))
# # 反射调用类方法
# getattr(Student, 'check_course')()
# # 反射调用静态方法
# getattr(Student, 'login')()


# class A():
#     def __init__(self, name):
#         self.name = name
#
#     def func(self):
#         print('in func')
# a = A(1)
# print(a.name)
# print(getattr(a, 'name'))
# getattr(a, 'func')()


# import os
# print(os.rename)
# print(getattr(os, 'rename'))


# def func():
#     print('hello')
#
#
# import sys
#
# print(sys.modules['__main__'])
# my_file = sys.modules['__main__']
# my_file.func()
# getattr(my_file, 'func')()


# # 选课系统的代码
# # login
# # 判断身份 并且根据身份实例化
# # 根据每个身份对应的类 让用户选择能够做的事情
# class Manager:
#     OPERATE_LST = [
#         ('创建学生账号', 'create_student'),
#         ('创建课程', 'create_course'),
#         ('查看学生信息', 'check_student_info')
#     ]
#
#     def __init__(self, name):
#         self.name = name
#
#     def create_student(self):
#         print('创建学生账号')
#
#     def create_course(self):
#         print('创建课程')
#
#     def check_student_info(self):
#         print('查看学生信息')
#
#
# class Teacher:
#     pass
#
#
# class Student:
#     OPERATE_LST = [
#         ('查看所有课程', 'check_course'),
#         ('选择课程', 'choose_course'),
#         ('查看已选择的课程', 'choosed_course')
#     ]
#
#     def __init__(self, name):
#         self.name = name
#
#     def check_course(self):
#         print('check_course')
#
#     def choose_course(self):
#         print('choose_course')
#
#     def choosed_course(self):
#         print('查看已选择的课程')
#
#
# def login():
#     username = input('username:')
#     password = input('password:')
#     with open('userinfo') as f:
#         for line in f:
#             user, pwd, ident = line.strip().split('|')
#             if user == username and pwd == password:
#                 print('登录成功')
#                 return username, ident
#
#
# import sys
#
#
# def main():
#     usr, id = login()
#     print('user, id:', usr, id)  # 此时usr和id均为字符串
#     my_file = sys.modules['__main__']  # 得到当前文件命名空间
#     cls = getattr(my_file, id)  # cls = getattr(当前文件, 'Manager') 从这个文件里找到id是哪一类
#     obj = cls(usr)  # 实例化对象
#     operate_lst = cls.OPERATE_LST
#     while 1:
#         for num, i in enumerate(operate_lst, 1):
#             print(num, i[0])
#         choice = int(input('num'))
#         choice_item = operate_lst[choice - 1]
#         getattr(obj, choice_item[1])()
#
#
# main()

# class Person:
#     def eat(self):
#         pass
# p = Person()
# print(hasattr(p, "eat"))
# print(hasattr(p, "drink"))


# class A:
#     def __init__(self, name):
#         self.name = name
# a = A('old')
# print(a.name)
# setattr(a, 'name', 'new')
# print(a.name)
# print(a.__dict__)
# delattr(a, 'name')
# print(a.__dict__)

# class A:
#     def __call__(self, *args, **kwargs):
#         print('执行call')
# class B:
#     def __init__(self, cls):
#         self.a = cls()
#         self.a()
# a = A()
# a()
# A()()
# B(A)


# class My:
#     def __init__(self, s):
#         self.s = s
#     def __len__(self):
#         return len(self.s)
# my = My('12345')
# print(len(my))


# class Single:
#     def __new__(cls, *args, **kwargs):
#         print('new')
#         return object.__new__(cls)
#
#     def __init__(self):
#         print('init')
#
# obj = Single()



# class Single:
#     __ISINCTANCE = None
#     def __new__(cls, *args, **kwargs):
#         if not cls.__ISINCTANCE:
#             cls.__ISINCTANCE = object.__new__(cls)
#         return cls.__ISINCTANCE
#     def __init__(self, name):
#         self.name = name
#
# s1 = Single('a')
# s2 = Single('b')
# print(s1.name)
# print(s2.name)


# class A:
#     def __str__(self):
#         return '%s %s' % (self.name, self.age)
#         return self.age
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
# a = A('a', 1)
# print(a)


