# class Count:
#     count = 0
#     def __init__(self):
#         Count.count += 1
#
#
# obj1 = Count()
# obj2 = Count()
# print(Count.count)


# class Count:
#     count = 0
#
#     def __init__(self):
#         Count.count = self.count + 1
#
# obj1 = Count()
#
# Count.count = 6
# print(Count.count)
#
# obj1.count = 8
# print(Count.count)


# 模拟英雄联盟写一个游戏人物的类（升级题）.
#   要求:
#   (1)创建一个 Game_role的类.
#   (2) 构造方法中给对象封装name,ad(攻击力),hp(血量).三个属性.
#   (3) 创建一个attack方法,此方法是实例化两个对象,互相攻击的功能:
#       例: 实例化一个对象 盖伦,ad为10, hp为100
#       实例化另个一个对象 剑豪 ad为20, hp为80
#       盖伦通过attack方法攻击剑豪,此方法要完成 '谁攻击谁,谁掉了多少血,  还剩多少血'的提示功能.

# class Game_role:
#     def __init__(self, name, ad, hp):
#         self.name = name
#         self.ad = ad
#         self.hp = hp
#
#     def attack(self, p):
#         p.hp = p.hp - self.ad
#         print('%s攻击%s,%s掉了%s血,还剩%s血' % (self.name, p.name, p.name, self.ad, p.hp))
#
#
# p1 = Game_role('盖伦', 10, 100)
# p2 = Game_role('亚索', 20, 80)
# p1.attack(p2)




# 版本一：添加武器：斧子，刀，枪，棍，棒...
# class Game_Role:
#     def __init__(self, name, ad, hp):
#         self.name = name
#         self.ad = ad
#         self.hp = hp
#
#     def attack(self, p):
#         p.hp = p.hp - self.ad
#         print('%s攻击%s,%s掉了%s血,还剩%s血' % (self.name, p.name, p.name, self.ad, p.hp))
#
#
# class Weapon:
#     def __init__(self, name, ad):
#         self.name = name
#         self.ad = ad
#
#     def fight(self, p1, p2):
#         p2.hp = p2.hp - self.ad - p1.ad
#         print('%s用%s打了%s,%s掉了%s血,还剩%s血' \
#               % (p1.name, self.name, p2.name, p2.name, self.ad + p1.ad, p2.hp))
#
#
# p1 = Game_Role('a', 20, 500)
# p2 = Game_Role('b', 50, 200)
# axe = Weapon('斧', 60)
# broadsword = Weapon('刀', 100)
#
# axe.fight(p1, p2)
# broadsword.fight(p2, p1)
#
# p1.attack(p2)

# 版本二:
class Game_Role:
    def __init__(self, name, ad, hp):
        self.name = name
        self.ad = ad
        self.hp = hp

    def armament_weapon(self, wea):
        self.wea = wea


class Weapon:
    def __init__(self, name, ad):
        self.name = name
        self.ad = ad

    def fight(self, p1, p2):
        p2.hp = p2.hp - self.ad
        print('%s用%s打了%s,%s掉了%s血,还剩%s血' \
              % (p1.name, self.name, p2.name, p2.name, self.ad + p1.ad, p2.hp))


p1 = Game_Role('a', 20, 500)
p2 = Game_Role('b', 50, 200)
axe = Weapon('斧', 60)
broadsword = Weapon('刀', 100)

print(axe)
p1.armament_weapon(axe)  # 给a装备了斧这个对象.
print(p1.wea)
print(p1.wea.name)
print(p1.wea.ad)
p1.wea.fight(p1, p2)

























# 作业
# # 1，暴力摩托程序（完成下列需求）：
# # 1.1
# # 创建三个游戏人物，分别是：
# # •    a，女，18，攻击力ad为20，血量200
# # •    b，男，20，攻击力ad为30，血量150
# # •    c，女，19，攻击力ad为50，血量80
# # 1.2
# # 创建三个游戏武器，分别是：
# # •    平底锅，ad为20
# # •    斧子，ad为50
# # •    双节棍，ad为65
# #
# # 1.3
# # 创建三个游戏摩托车，分别是：
# #
# # •    小踏板，速度60迈
# # •    雅马哈，速度80迈
# # •    宝马，速度120迈。
#
# class game_role:
#     def __init__(self, name, sex, age, ad, hp):
#         self.name = name
#         self.sex = sex
#         self.age = age
#         self.ad = ad
#         self.hp = hp
#
#     def fight(self, fighter):
#         print('%s赤手空拳打了%s%s滴血，%s还剩%s血' % (self.name, fighter.name, self.ad, fighter.name, fighter.hp - self.ad))
#
#     def hold_weapon(self, wea):
#         self.wea = wea
#
#     def drive_motor(self, mot):
#         self.mot = mot
#
#     def ride_fight(self, fighter):
#         print('%s骑着%s打了骑着%s的%s一%s，%s哭了，还剩%s血' % (
#         self.name, self.mot.name, fighter.mot.name, fighter.name, self.wea.name, fighter.name,
#         fighter.hp - self.ad - self.wea.ad))
#
#
# class weapon:
#     def __init__(self, name, ad):
#         self.name = name
#         self.ad = ad
#
#     def fight(self, r1, r2):
#         print('%s利用%s打了%s一%s，%s还剩%s血。' % (r1.name, self.name, r2.name, self.name, r2.name, r2.hp - r1.ad - self.ad))
#
#
# class motor:
#     def __init__(self, name, speed):
#         self.name = name
#         self.speed = speed
#
#     def drive(self, role):
#         print('%s骑着%s开着%s迈的车行驶在赛道上。' % (role.name, self.name, self.speed))
#
#
# r1 = game_role('a', '女', 18, 20, 200)
# r2 = game_role('b', '男', 20, 30, 150)
# r3 = game_role('c', '女', 19, 50, 80)
#
# w1 = weapon('平底锅', 20)
# w2 = weapon('斧子', 50)
# w3 = weapon('双截棍', 65)
#
# m1 = motor('小踏板', 60)
# m2 = motor('雅马哈', 80)
# m3 = motor('宝马', 120)
#
# # （1）a骑着小踏板开着60迈的车行驶在赛道上。
# # （2）b骑着宝马开着120迈的车行驶在赛道上。
# # （3）c骑着雅马哈开着80迈的车行驶在赛道上。
# r1.drive_motor(m1)
# r1.mot.drive(r1)
#
# r2.drive_motor(m3)
# r2.mot.drive(r3)
#
# r3.drive_motor(m2)
# r3.mot.drive(r2)
#
# # （4）a赤手空拳打了c20滴血，c还剩xx血。
# # （5）b赤手空拳打了c30滴血，c还剩xx血。
#
# r1.fight(r3)
# r2.fight(r3)
#
# # （6）c利用平底锅打了a一平底锅，a还剩xx血。
# # （7）c利用斧子打了b一斧子，b还剩xx血。
#
# r3.hold_weapon(w1)
# r3.wea.fight(r3, r1)
#
# r3.hold_weapon(w2)
# r3.wea.fight(r3, r2)
#
# # （8）a骑着宝马打了骑着小踏板的b一双节棍，b哭了，还剩xx血。
# # （9）c骑着小踏板打了骑着雅马哈的b一斧子，b哭了，还剩xx血。
#
# r1.drive_motor(m3)
# r1.hold_weapon(w3)
# r2.drive_motor(m1)
# r1.ride_fight(r2)
#
# r3.drive_motor(m1)
# r3.hold_weapon(w2)
# r2.drive_motor(m2)
# r3.ride_fight(r2)


# # 2，定义一个类，计算圆的周长和面积。
# from math import pi
#
#
# class circle:
#     def __init__(self, r):
#         self.r = r
#
#     def perimeter(self):
#         return 2 * pi * self.r
#
#     def area(self):
#         return pi * self.r ** 2
#
#
# c = circle(1)
# print(round(c.perimeter(), 2))
# print(round(c.area(), 2))


# 3，定义一个圆环类，计算圆环的周长和面积（升级题）。
from math import pi


class ring:
    def __init__(self, outr, inr):
        self.outr = outr
        self.inr = inr

    def perimeter(self):
        return 2 * pi * self.outr + 2 * pi * self.inr

    def area(self):
        return pi * (self.outr ** 2 - self.inr ** 2)


r = ring(2, 1)
print(r.perimeter())
print(r.area())


# 利用组合
from math import pi


class circle:
    def __init__(self, r):
        self.r = r

    def perimeter(self):
        return 2 * pi * self.r

    def area(self):
        return pi * self.r ** 2


class ring:
    def __init__(self, outr, inr):
        self.outr = circle(outr)
        self.inr = circle(inr)

    def perimeter(self):
        return self.outr.perimeter() + self.inr.perimeter()

    def area(self):
        return self.outr.area() - self.inr.area()

r = ring(2, 1)
print(r.perimeter())
print(r.area())







